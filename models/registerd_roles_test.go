// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRegisterdRoles(t *testing.T) {
	t.Parallel()

	query := RegisterdRoles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRegisterdRolesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegisterdRole{}
	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RegisterdRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegisterdRolesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegisterdRole{}
	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RegisterdRoles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RegisterdRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegisterdRolesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegisterdRole{}
	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RegisterdRoleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RegisterdRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegisterdRolesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegisterdRole{}
	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RegisterdRoleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RegisterdRole exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RegisterdRoleExists to return true, but got false.")
	}
}

func testRegisterdRolesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegisterdRole{}
	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	registerdRoleFound, err := FindRegisterdRole(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if registerdRoleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRegisterdRolesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegisterdRole{}
	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RegisterdRoles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRegisterdRolesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegisterdRole{}
	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RegisterdRoles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRegisterdRolesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	registerdRoleOne := &RegisterdRole{}
	registerdRoleTwo := &RegisterdRole{}
	if err = randomize.Struct(seed, registerdRoleOne, registerdRoleDBTypes, false, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}
	if err = randomize.Struct(seed, registerdRoleTwo, registerdRoleDBTypes, false, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = registerdRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = registerdRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RegisterdRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRegisterdRolesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	registerdRoleOne := &RegisterdRole{}
	registerdRoleTwo := &RegisterdRole{}
	if err = randomize.Struct(seed, registerdRoleOne, registerdRoleDBTypes, false, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}
	if err = randomize.Struct(seed, registerdRoleTwo, registerdRoleDBTypes, false, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = registerdRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = registerdRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RegisterdRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func registerdRoleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RegisterdRole) error {
	*o = RegisterdRole{}
	return nil
}

func registerdRoleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RegisterdRole) error {
	*o = RegisterdRole{}
	return nil
}

func registerdRoleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RegisterdRole) error {
	*o = RegisterdRole{}
	return nil
}

func registerdRoleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RegisterdRole) error {
	*o = RegisterdRole{}
	return nil
}

func registerdRoleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RegisterdRole) error {
	*o = RegisterdRole{}
	return nil
}

func registerdRoleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RegisterdRole) error {
	*o = RegisterdRole{}
	return nil
}

func registerdRoleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RegisterdRole) error {
	*o = RegisterdRole{}
	return nil
}

func registerdRoleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RegisterdRole) error {
	*o = RegisterdRole{}
	return nil
}

func registerdRoleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RegisterdRole) error {
	*o = RegisterdRole{}
	return nil
}

func testRegisterdRolesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RegisterdRole{}
	o := &RegisterdRole{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, registerdRoleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RegisterdRole object: %s", err)
	}

	AddRegisterdRoleHook(boil.BeforeInsertHook, registerdRoleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	registerdRoleBeforeInsertHooks = []RegisterdRoleHook{}

	AddRegisterdRoleHook(boil.AfterInsertHook, registerdRoleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	registerdRoleAfterInsertHooks = []RegisterdRoleHook{}

	AddRegisterdRoleHook(boil.AfterSelectHook, registerdRoleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	registerdRoleAfterSelectHooks = []RegisterdRoleHook{}

	AddRegisterdRoleHook(boil.BeforeUpdateHook, registerdRoleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	registerdRoleBeforeUpdateHooks = []RegisterdRoleHook{}

	AddRegisterdRoleHook(boil.AfterUpdateHook, registerdRoleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	registerdRoleAfterUpdateHooks = []RegisterdRoleHook{}

	AddRegisterdRoleHook(boil.BeforeDeleteHook, registerdRoleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	registerdRoleBeforeDeleteHooks = []RegisterdRoleHook{}

	AddRegisterdRoleHook(boil.AfterDeleteHook, registerdRoleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	registerdRoleAfterDeleteHooks = []RegisterdRoleHook{}

	AddRegisterdRoleHook(boil.BeforeUpsertHook, registerdRoleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	registerdRoleBeforeUpsertHooks = []RegisterdRoleHook{}

	AddRegisterdRoleHook(boil.AfterUpsertHook, registerdRoleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	registerdRoleAfterUpsertHooks = []RegisterdRoleHook{}
}

func testRegisterdRolesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegisterdRole{}
	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RegisterdRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRegisterdRolesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegisterdRole{}
	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(registerdRoleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RegisterdRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRegisterdRoleToOneGuildUsingGuild(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RegisterdRole
	var foreign Guild

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, registerdRoleDBTypes, false, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, guildDBTypes, false, guildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Guild struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GuildID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Guild().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RegisterdRoleSlice{&local}
	if err = local.L.LoadGuild(ctx, tx, false, (*[]*RegisterdRole)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Guild == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Guild = nil
	if err = local.L.LoadGuild(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Guild == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRegisterdRoleToOneSetOpGuildUsingGuild(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RegisterdRole
	var b, c Guild

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, registerdRoleDBTypes, false, strmangle.SetComplement(registerdRolePrimaryKeyColumns, registerdRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, guildDBTypes, false, strmangle.SetComplement(guildPrimaryKeyColumns, guildColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, guildDBTypes, false, strmangle.SetComplement(guildPrimaryKeyColumns, guildColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Guild{&b, &c} {
		err = a.SetGuild(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Guild != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RegisterdRole != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GuildID != x.ID {
			t.Error("foreign key was wrong value", a.GuildID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GuildID))
		reflect.Indirect(reflect.ValueOf(&a.GuildID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GuildID != x.ID {
			t.Error("foreign key was wrong value", a.GuildID, x.ID)
		}
	}
}

func testRegisterdRolesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegisterdRole{}
	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRegisterdRolesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegisterdRole{}
	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RegisterdRoleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRegisterdRolesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RegisterdRole{}
	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RegisterdRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	registerdRoleDBTypes = map[string]string{`ID`: `bigint`, `GuildID`: `bigint`}
	_                    = bytes.MinRead
)

func testRegisterdRolesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(registerdRolePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(registerdRoleAllColumns) == len(registerdRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RegisterdRole{}
	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RegisterdRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true, registerdRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRegisterdRolesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(registerdRoleAllColumns) == len(registerdRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RegisterdRole{}
	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true, registerdRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RegisterdRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, registerdRoleDBTypes, true, registerdRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(registerdRoleAllColumns, registerdRolePrimaryKeyColumns) {
		fields = registerdRoleAllColumns
	} else {
		fields = strmangle.SetComplement(
			registerdRoleAllColumns,
			registerdRolePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RegisterdRoleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRegisterdRolesUpsert(t *testing.T) {
	t.Parallel()

	if len(registerdRoleAllColumns) == len(registerdRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RegisterdRole{}
	if err = randomize.Struct(seed, &o, registerdRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RegisterdRole: %s", err)
	}

	count, err := RegisterdRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, registerdRoleDBTypes, false, registerdRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RegisterdRole struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RegisterdRole: %s", err)
	}

	count, err = RegisterdRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
