// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRankRoles(t *testing.T) {
	t.Parallel()

	query := RankRoles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRankRolesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RankRole{}
	if err = randomize.Struct(seed, o, rankRoleDBTypes, true, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RankRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRankRolesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RankRole{}
	if err = randomize.Struct(seed, o, rankRoleDBTypes, true, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RankRoles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RankRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRankRolesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RankRole{}
	if err = randomize.Struct(seed, o, rankRoleDBTypes, true, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RankRoleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RankRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRankRolesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RankRole{}
	if err = randomize.Struct(seed, o, rankRoleDBTypes, true, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RankRoleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RankRole exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RankRoleExists to return true, but got false.")
	}
}

func testRankRolesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RankRole{}
	if err = randomize.Struct(seed, o, rankRoleDBTypes, true, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	rankRoleFound, err := FindRankRole(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if rankRoleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRankRolesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RankRole{}
	if err = randomize.Struct(seed, o, rankRoleDBTypes, true, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RankRoles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRankRolesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RankRole{}
	if err = randomize.Struct(seed, o, rankRoleDBTypes, true, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RankRoles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRankRolesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rankRoleOne := &RankRole{}
	rankRoleTwo := &RankRole{}
	if err = randomize.Struct(seed, rankRoleOne, rankRoleDBTypes, false, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}
	if err = randomize.Struct(seed, rankRoleTwo, rankRoleDBTypes, false, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rankRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rankRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RankRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRankRolesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	rankRoleOne := &RankRole{}
	rankRoleTwo := &RankRole{}
	if err = randomize.Struct(seed, rankRoleOne, rankRoleDBTypes, false, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}
	if err = randomize.Struct(seed, rankRoleTwo, rankRoleDBTypes, false, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rankRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rankRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RankRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func rankRoleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RankRole) error {
	*o = RankRole{}
	return nil
}

func rankRoleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RankRole) error {
	*o = RankRole{}
	return nil
}

func rankRoleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RankRole) error {
	*o = RankRole{}
	return nil
}

func rankRoleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RankRole) error {
	*o = RankRole{}
	return nil
}

func rankRoleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RankRole) error {
	*o = RankRole{}
	return nil
}

func rankRoleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RankRole) error {
	*o = RankRole{}
	return nil
}

func rankRoleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RankRole) error {
	*o = RankRole{}
	return nil
}

func rankRoleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RankRole) error {
	*o = RankRole{}
	return nil
}

func rankRoleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RankRole) error {
	*o = RankRole{}
	return nil
}

func testRankRolesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RankRole{}
	o := &RankRole{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, rankRoleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RankRole object: %s", err)
	}

	AddRankRoleHook(boil.BeforeInsertHook, rankRoleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	rankRoleBeforeInsertHooks = []RankRoleHook{}

	AddRankRoleHook(boil.AfterInsertHook, rankRoleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	rankRoleAfterInsertHooks = []RankRoleHook{}

	AddRankRoleHook(boil.AfterSelectHook, rankRoleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	rankRoleAfterSelectHooks = []RankRoleHook{}

	AddRankRoleHook(boil.BeforeUpdateHook, rankRoleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	rankRoleBeforeUpdateHooks = []RankRoleHook{}

	AddRankRoleHook(boil.AfterUpdateHook, rankRoleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	rankRoleAfterUpdateHooks = []RankRoleHook{}

	AddRankRoleHook(boil.BeforeDeleteHook, rankRoleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	rankRoleBeforeDeleteHooks = []RankRoleHook{}

	AddRankRoleHook(boil.AfterDeleteHook, rankRoleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	rankRoleAfterDeleteHooks = []RankRoleHook{}

	AddRankRoleHook(boil.BeforeUpsertHook, rankRoleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	rankRoleBeforeUpsertHooks = []RankRoleHook{}

	AddRankRoleHook(boil.AfterUpsertHook, rankRoleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	rankRoleAfterUpsertHooks = []RankRoleHook{}
}

func testRankRolesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RankRole{}
	if err = randomize.Struct(seed, o, rankRoleDBTypes, true, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RankRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRankRolesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RankRole{}
	if err = randomize.Struct(seed, o, rankRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(rankRoleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RankRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRankRoleToOneGuildUsingGuild(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RankRole
	var foreign Guild

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, rankRoleDBTypes, false, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, guildDBTypes, false, guildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Guild struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GuildID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Guild().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RankRoleSlice{&local}
	if err = local.L.LoadGuild(ctx, tx, false, (*[]*RankRole)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Guild == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Guild = nil
	if err = local.L.LoadGuild(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Guild == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRankRoleToOneSetOpGuildUsingGuild(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RankRole
	var b, c Guild

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rankRoleDBTypes, false, strmangle.SetComplement(rankRolePrimaryKeyColumns, rankRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, guildDBTypes, false, strmangle.SetComplement(guildPrimaryKeyColumns, guildColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, guildDBTypes, false, strmangle.SetComplement(guildPrimaryKeyColumns, guildColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Guild{&b, &c} {
		err = a.SetGuild(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Guild != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RankRoles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GuildID != x.ID {
			t.Error("foreign key was wrong value", a.GuildID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GuildID))
		reflect.Indirect(reflect.ValueOf(&a.GuildID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GuildID != x.ID {
			t.Error("foreign key was wrong value", a.GuildID, x.ID)
		}
	}
}

func testRankRolesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RankRole{}
	if err = randomize.Struct(seed, o, rankRoleDBTypes, true, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRankRolesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RankRole{}
	if err = randomize.Struct(seed, o, rankRoleDBTypes, true, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RankRoleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRankRolesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RankRole{}
	if err = randomize.Struct(seed, o, rankRoleDBTypes, true, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RankRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	rankRoleDBTypes = map[string]string{`ID`: `bigint`, `GuildID`: `bigint`, `Rank`: `integer`}
	_               = bytes.MinRead
)

func testRankRolesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(rankRolePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(rankRoleAllColumns) == len(rankRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RankRole{}
	if err = randomize.Struct(seed, o, rankRoleDBTypes, true, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RankRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rankRoleDBTypes, true, rankRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRankRolesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(rankRoleAllColumns) == len(rankRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RankRole{}
	if err = randomize.Struct(seed, o, rankRoleDBTypes, true, rankRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RankRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rankRoleDBTypes, true, rankRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(rankRoleAllColumns, rankRolePrimaryKeyColumns) {
		fields = rankRoleAllColumns
	} else {
		fields = strmangle.SetComplement(
			rankRoleAllColumns,
			rankRolePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RankRoleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRankRolesUpsert(t *testing.T) {
	t.Parallel()

	if len(rankRoleAllColumns) == len(rankRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RankRole{}
	if err = randomize.Struct(seed, &o, rankRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RankRole: %s", err)
	}

	count, err := RankRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, rankRoleDBTypes, false, rankRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RankRole struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RankRole: %s", err)
	}

	count, err = RankRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
