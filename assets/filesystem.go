// Code generated by shogo82148/assets-life v1.0.0. DO NOT EDIT.

//go:generate go run assets-life.go "../views" . assets

package assets

import (
	"io"
	"net/http"
	"os"
	"path"
	"sort"
	"strings"
	"time"
)

// Root is the root of the file system.
var Root http.FileSystem = fileSystem{
	file{
		name:    "/",
		content: "",
		mode:    0755 | os.ModeDir,
		next:    0,
		child:   1,
	},
	file{
		name:    "/index.html",
		content: "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Dota2 Cog</title>\n</head>\n<body>\n  <h1>Dota2 Cog</h1>\n  <p>Discordの役職に自動でDota2のランク(メダル)を割り当てるbotです</p>\n  <p>1時間に1回、自動でOpenDotaから情報を取ってきて役職を割り当てます</p>\n  <hr>\n  <h3>使い方</h3>\n  <h4>サーバーアドミン</h4>\n  <p><a href=\"/add-bot\" target=\"_blank\">ここ</a>からサーバーにbotを追加してください</p>\n  <p>追加されたロールは色や名前の変更など自由に編集可能です(多分…)</p>\n  <h4>サーバーメンバー</h4>\n  <p>Dota2 Cog ボットにDMで <code>/dota2-cog register</code> コマンドを送って</p>\n  <p>表示されたリンクをクリックし、Steamとの連携を有効にしてください</p>\n  <hr>\n  <h3>コマンドリスト</h3>\n  <h5>/dota2-cog register</h5>\n  <p>SteamとDiscordのIDを連携させます (DM推奨)</p>\n  <p>一度実行すれば、他のサーバーでこのbotを導入したとしても再使用は不要です</p>\n  <h5>/dota2-cog force-fetch</h5>\n  <p>現在のサーバーの全ユーザーのランクを取得します (乱用禁止!) (サーバーコマンドのみ) (管理者のみ)</p>\n  <h5>/dota2-cog fix-rank-roles</h5>\n  <p>ランクロールの修正をします 間違えてロールを削除してしまったときなどに使ってください (サーバーコマンドのみ) (管理者のみ)</p>\n  <h5>/dota2-cog fix-registerd-role</h5>\n  <p>登録済みロールの修正をします 間違えてロールを削除してしまったときなどに使ってください (サーバーコマンドのみ) (管理者のみ)</p>\n  <hr>\n  <h3>バージョン履歴</h3>\n  <ul>\n    <li>\n      <h4>0.2.0 2020-06-21</h4>\n      <p>登録済みユーザーを割り当てる `Dota2 Cog Registerd` ロールを作った</p>\n      <p>`/dota2-cog fix-roles` コマンドを `/dota2-cog fix-rank-roles` に変更</p>\n    </li>\n    <li>\n      <h4>0.1.4 2020-06-15</h4>\n      <p>force-fetchしたときにプログレスバーを表示するようにした</p>\n      <p>fetch中にforce-fetchした場合エラーを返すようにした</p>\n      <p>fix-roles コマンドを追加した</p>\n    </li>\n    <li>\n      <h4>0.1.3 2020-06-14</h4>\n      <p>ロールの再割り当てのアルゴリズムの最適化</p>\n    </li>\n    <li>\n      <h4>0.1.2 2020-06-13</h4>\n      <p>ちょっとだけ修正</p>\n    </li>\n    <li>\n      <h4>0.1.1 2020-06-12</h4>\n      <p>BotアカウントのFetchをスキップするようにした</p>\n    </li>\n    <li>\n      <h4>0.1.0 2020-06-10</h4>\n      <p>初期バージョン</p>\n    </li>\n  </ul>\n  <hr>\n  <h3>寄付のお願い</h3>\n  <p>Dota2 Cog は無料で使えますが、もしあなたがこのbotの維持に協力してくれるなら寄付をお願いします</p>\n  <p>このサービスの運営には毎月のサーバー代などが掛かっています</p>\n  <h4>月額支援</h4>\n  <script src=\"https://liberapay.com/aoisensi/widgets/button.js\"></script>\n  <noscript><a href=\"https://liberapay.com/aoisensi/donate\"><img alt=\"Donate using Liberapay\" src=\"https://liberapay.com/assets/widgets/donate.svg\"></a></noscript>\n  <h4>1回限りの寄付</h4>\n  <style>.bmc-button img{height: 34px !important;width: 35px !important;margin-bottom: 1px !important;box-shadow: none !important;border: none !important;vertical-align: middle !important;}.bmc-button{padding: 7px 15px 7px 10px !important;line-height: 35px !important;height:51px !important;text-decoration: none !important;display:inline-flex !important;color:#ffffff !important;background-color:#5F7FFF !important;border-radius: 5px !important;border: 1px solid transparent !important;padding: 7px 15px 7px 10px !important;font-size: 28px !important;letter-spacing:0.6px !important;box-shadow: 0px 1px 2px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;margin: 0 auto !important;font-family:'Cookie', cursive !important;-webkit-box-sizing: border-box !important;box-sizing: border-box !important;}.bmc-button:hover, .bmc-button:active, .bmc-button:focus {-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;text-decoration: none !important;box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;opacity: 0.85 !important;color:#ffffff !important;}</style><link href=\"https://fonts.googleapis.com/css?family=Cookie\" rel=\"stylesheet\"><a class=\"bmc-button\" target=\"_blank\" href=\"https://www.buymeacoffee.com/aoisensi\"><img src=\"https://cdn.buymeacoffee.com/buttons/bmc-new-btn-logo.svg\" alt=\"Buy me a soda\"><span style=\"margin-left:5px;font-size:28px !important;\">Buy me a soda</span></a>\n  <hr>\n  <h3>その他</h3>\n  <p>本当はDiscordのプロフィールからSteamIDを取得したかったがAPIがサポートしてないのでログインさせるという形になった…</p>\n  <p>1000人以上いるサーバーでは最初の1000人しかデータを取れない 後々何とかする</p>\n  <p>サーバーにいる人全員に連携を促すDMを送るコマンド作りたいがスパム扱いされそう…</p>\n  <p>ソースコード:<a href=\"https://github.com/aoisensi/dota2-cog\">https://github.com/aoisensi/dota2-cog</a></p>\n  <p>なにか問題点などあれば`aoisensi#0634`までどうぞ</p>\n  <p>I will write this page with English.</p>\n</body>\n</html>",
		mode:    0644,
		next:    -1,
		child:   -1,
	},
}

type fileSystem []file

func (fs fileSystem) Open(name string) (http.File, error) {
	name = path.Clean("/" + name)
	i := sort.Search(len(fs), func(i int) bool { return fs[i].name >= name })
	if i >= len(fs) || fs[i].name != name {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	f := &fs[i]
	return &httpFile{
		Reader: strings.NewReader(f.content),
		file:   f,
		fs:     fs,
		idx:    i,
		dirIdx: f.child,
	}, nil
}

type file struct {
	name    string
	content string
	mode    os.FileMode
	child   int
	next    int
}

var _ os.FileInfo = (*file)(nil)

func (f *file) Name() string {
	return path.Base(f.name)
}

func (f *file) Size() int64 {
	return int64(len(f.content))
}

func (f *file) Mode() os.FileMode {
	return f.mode
}

var zeroTime time.Time

func (f *file) ModTime() time.Time {
	return zeroTime
}

func (f *file) IsDir() bool {
	return f.Mode().IsDir()
}

func (f *file) Sys() interface{} {
	return nil
}

type httpFile struct {
	*strings.Reader
	file   *file
	fs     fileSystem
	idx    int
	dirIdx int
}

var _ http.File = (*httpFile)(nil)

func (f *httpFile) Stat() (os.FileInfo, error) {
	return f.file, nil
}

func (f *httpFile) Readdir(count int) ([]os.FileInfo, error) {
	ret := []os.FileInfo{}
	if !f.file.IsDir() {
		return ret, nil
	}

	if count <= 0 {
		for f.dirIdx >= 0 {
			entry := &f.fs[f.dirIdx]
			ret = append(ret, entry)
			f.dirIdx = entry.next
		}
		return ret, nil
	}

	ret = make([]os.FileInfo, 0, count)
	for f.dirIdx >= 0 {
		entry := &f.fs[f.dirIdx]
		ret = append(ret, entry)
		f.dirIdx = entry.next
		if len(ret) == count {
			return ret, nil
		}
	}
	return ret, io.EOF
}

func (f *httpFile) Close() error {
	return nil
}
